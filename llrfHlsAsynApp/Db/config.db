record(bo, "$(DEVICE):OPMODE")
{
    field(PINI, "YES")
    field(DESC, "OP mode bkwd_cmtb/adaptive")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0) op_mode")
    field(SCAN, "Passive")
    field(OMSL, "supervisory")
    field(ZNAM, "BKWD_CMPTB")
    field(ONAM, "Adaptive")
    info(autosaveFields, "VAL")
}

record(ao, "$(DEVICE):PGAINADPT")
{
    field(PINI, "YES")
    field(DESC, "phase gain for adpative")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0) p_adaptive_gain")
    field(OMSL, "supervisory")
    field(SCAN, "Passive")
    field(PREC, "5")
    info(autosaveFields, "VAL")
}

record(ao, "$(DEVICE):AGAINADPT")
{
    field(PINI, "YES")
    field(DESC, "amplitude gain for adaptive")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0) a_adaptive_gain")
    field(OMSL, "supervisory")
    field(SCAN, "Passive")
    field(PREC, "5")
    info(autosaveFields, "VAL")
}

record(ao, "$(DEVICE):PWGHTDISTB")
{
    field(PINI, "YES")
    field(DESC, "phase disturbance weight")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0) p_distb_gain")
    field(OMSL, "supervisory")
    field(SCAN, "Passive")
    field(PREC, "5")
    info(autosaveFields, "VAL")
}

record(ao, "$(DEVICE):AWGHTDISTB")
{
    field(PINI, "YES")
    field(DESC, "amplitude disturbance weight")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0) a_distb_gain")
    field(OMSL, "supervisory")
    field(SCAN, "Passive")
    field(PREC, "5")
    info(autosaveFields, "VAL")
}

record(waveform, "$(DEVICE):HARMOCS1ST")
{
    field(PINI, "YES")
    field(DESC, "1st harmonics CS")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP,  "@asyn($(PORT),0) harmo_cs1")
    field(SCAN, "Passive")
    field(FTVL, "DOUBLE")
    field(NELM, "$(NELM_HARMO)")
    info(autosaveFields, "VAL")
}


record(waveform, "$(DEVICE):HARMOSN1ST")
{
    field(PINI, "YES")
    field(DESC, "1st harmonics SN")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP,  "@asyn($(PORT),0) harmo_sn1")
    field(SCAN, "Passive")
    field(FTVL, "DOUBLE")
    field(NELM, "$(NELM_HARMO)")
    info(autosaveFields, "VAL")
}

record(waveform, "$(DEVICE):HARMOCS2ND")
{
    field(PINI, "YES")
    field(DESC, "2nd harmonics CS")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP,  "@asyn($(PORT),0) harmo_cs2")
    field(SCAN, "Passive")
    field(FTVL, "DOUBLE")
    field(NELM, "$(NELM_HARMO)")
    info(autosaveFields, "VAL")
}


record(waveform, "$(DEVICE):HARMOSN2ND")
{
    field(PINI, "YES")
    field(DESC, "2nd harmonics SN")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP,  "@asyn($(PORT),0) harmo_sn2")
    field(SCAN, "Passive")
    field(FTVL, "DOUBLE")
    field(NELM, "$(NELM_HARMO)")
    info(autosaveFields, "VAL")
}



record(waveform, "$(DEVICE):HARMOCS3RD")
{
    field(PINI, "YES")
    field(DESC, "3rd harmonics CS")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP,  "@asyn($(PORT),0) harmo_cs3")
    field(SCAN, "Passive")
    field(FTVL, "DOUBLE")
    field(NELM, "$(NELM_HARMO)")
    info(autosaveFields, "VAL")
}


record(waveform, "$(DEVICE):HARMOSN3RD")
{
    field(PINI, "YES")
    field(DESC, "3rd harmonics SN")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP,  "@asyn($(PORT),0) harmo_sn3")
    field(SCAN, "Passive")
    field(FTVL, "DOUBLE")
    field(NELM, "$(NELM_HARMO)")
    info(autosaveFields, "VAL")
}






record(bo, "$(DEVICE):STRMENB")
{
    field(PINI, "YES")
    field(DESC, "BSA stream enable/disable")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0) stream_enable")
    field(SCAN, "Passive")
    field(OMSL, "supervisory")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    info(autosaveFields, "VAL")
}


record(bo, "$(DEVICE):TSENB")
{
    field(PINI, "YES")
    field(DESC, "Timeslot feedback enable/disable")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0) timeslot_enable")
    field(SCAN, "Passive")
    field(OMSL, "supervisory")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "1")
    info(autosaveFields, "VAL")
}


record(mbbo, "$(DEVICE):MODECFG")
{
    field(PINI, "YES")
    field(DESC, "Trigger Mode Config")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0) mode_config")
    field(SCAN, "Passive")
    field(OMSL, "supervisory")
    field(ZRST, "Disable")
    field(ONST, "ACCEL")
    field(TWST, "STDBY")
    field(ZRVL, "0")
    field(ONVL, "3")
    field(TWVL, "2")
    field(FLNK, "$(DEVICE):MODE_calc")
    info(autosaveFields, "VAL")
}

record(calcout, "$(DEVICE):MODE_calc")
{
    field(INPA, "$(DEVICE):MODECFG CP")
# B is a hook. System can write 0 to indicate Disabled, 1 to indicate not disabled.
# Details left to future use.
    field(INPB, "1")
    field(CALC, "A*B")
    field(FLNK, "$(DEVICE):MODE")
}

record(mbbi, "$(DEVICE):MODE")
{
    field(PINI, "YES")
    field(DESC, "Trigger Mode")
    field(INP,  "$(DEVICE):MODE_calc")
    field(SCAN, "Passive")
    field(ZRST, "Disable")
    field(ONST, "ACCEL")
    field(TWST, "STDBY")
    field(ZRVL, "0")
    field(ONVL, "3")
    field(TWVL, "2")
}


#
record(ao, "$(DEVICE):REFPOC")
{
    field(PINI, "YES")
    field(DESC, "phase offset correction for reference")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0) p_ref_offset")
    field(OMSL, "supervisory")
    field(SCAN, "Passive")
    field(PREC, "3")
    info(autosaveFields, "VAL")
}

record(ao, "$(DEVICE):FBPOC")
{
    field(PINI, "YES")
    field(DESC, "phase offset correction for feedback")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0) p_fb_offset")
    field(OMSL, "supervisory")
    field(SCAN, "Passive")
    field(PREC, "3")
    info(autosaveFields, "VAL")
}

record(ao, "$(DEVICE):PGAIN")
{
    field(PINI, "YES")
    field(DESC, "gain for phase feedback")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0) p_gain")
    field(OMSL, "supervisory")
    field(SCAN, "Passive")
    field(PREC, "5")
    info(autosaveFields, "VAL")
}

record(ao, "$(DEVICE):AGAIN")
{
    field(PINI, "YES")
    field(DESC, "gain for amplitude feedback")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0) a_gain")
    field(OMSL, "supervisory")
    field(SCAN, "Passive")
    field(PREC, "5")
    info(autosaveFields, "VAL")
}

record(bo, "$(DEVICE):REFSUBENB")
{
    field(PINI, "YES")
    field(DESC, "reference subtraction enable")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0) ref_subtraction_enable")
    field(SCAN, "Passive")
    field(OMSL, "supervisory")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    info(autosaveFields, "VAL") 
}

record(bo, "$(DEVICE):PFBENB")
{
    field(PINI, "YES")
    field(DESC, "phase feedback enable")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0) fb_phase_enable")
    field(SCAN, "Passive")
    field(OMSL, "supervisory")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
#    info(autosaveFields, "VAL")
}

record(bo, "$(DEVICE):AFBENB")
{
    field(PINI, "YES")
    field(DESC, "amplitude feedback enable")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0) fb_ampl_enable")
    field(SCAN, "Passive")
    field(OMSL, "supervisory")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
#    info(autosaveFields, "VAL")
}


record(ao, "$(DEVICE):PCORUPL")
{
    field(PINI, "YES")
    field(DESC, "phase correction upper limit")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0) p_corr_upper")
    field(OMSL, "supervisory")
    field(SCAN, "Passive")
    field(PREC, "3")
    info(autosaveFields, "VAL")
}

record(ao, "$(DEVICE):PCORLOL")
{
    field(PINI, "YES")
    field(DESC, "phase correction lower limit")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0) p_corr_lower")
    field(OMSL, "supervisory")
    field(SCAN, "Passive")
    field(PREC, "3")
    info(autosaveFields, "VAL")
}


record(ao, "$(DEVICE):ACORUPL")
{
    field(PINI, "YES")
    field(DESC, "amplitude correction upper limit")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0) a_corr_upper")
    field(OMSL, "supervisory")
    field(SCAN, "Passive")
    field(PREC, "3")
    info(autosaveFields, "VAL")
}


record(ao, "$(DEVICE):ACORLOL")
{
    field(PINI, "YES")
    field(DESC, "amplitude correction lower limit")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0) a_corr_lower")
    field(OMSL, "supervisory")
    field(SCAN, "Passive")
    field(PREC, "3")
    info(autosaveFields, "VAL")
}


record(ao, "$(DEVICE):ADRVUPL")
{
    field(PINI, "YES")
    field(DESC, "amplitude drive upper limit")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0) a_drv_upper")
    field(OMSL, "supervisory")
    field(SCAN, "Passive")
    field(PREC, "3")
    info(autosaveFields, "VAL")
}


record(ao, "$(DEVICE):ADRVLOL")
{
    field(PINI, "YES")
    field(DESC, "amplitude drive lower limit")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0) a_drv_lower")
    field(OMSL, "supervisory")
    field(SCAN, "Passive")
    field(PREC, "3")
    info(autosaveFields, "VAL")
}


record(ao, "$(DEVICE):ATHRED")
{
    field(PINI, "YES")
    field(DESC, "amplitude threshold")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0) a_threshold")
    field(OMSL, "supervisory")
    field(SCAN, "Passive")
    field(PREC, "3")
    info(autosaveFields, "VAL")
}



record(waveform, "$(DEVICE):IBL")
{
#    field(PINI, "YES")
    field(DESC, "I baseband waveform")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP,  "@asyn($(PORT),0) i_baseband_wf")
    field(SCAN, "Passive")
    field(FTVL, "DOUBLE")
    field(NELM, "$(NELM_BL)")
    info(autosaveFields, "VAL")
}

record(waveform, "$(DEVICE):QBL")
{
#    field(PINI, "YES")
    field(DESC, "Q baseband waveform")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP,  "@asyn($(PORT),0) q_baseband_wf")
    field(SCAN, "Passive")
    field(FTVL, "DOUBLE")
    field(NELM, "$(NELM_BL)")
    info(autosaveFields, "VAL")
}

record(waveform, "$(DEVICE):ABL")
{
#    field(PINI, "YES")
    field(DESC, "Ampl baseband waveform")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP,  "@asyn($(PORT),0) a_baseband_wf")
    field(SCAN, "Passive")
    field(FTVL, "DOUBLE")
    field(NELM, "$(NELM_BL)")
    info(autosaveFields, "VAL")
}

record(waveform, "$(DEVICE):PBL")
{
#    field(PINI, "YES")
    field(DESC, "Phase baseband waveform")
    field(DTYP, "asynFloat64ArrayOut")
    field(INP,  "@asyn($(PORT),0) p_baseband_wf")
    field(SCAN, "Passive")
    field(FTVL, "DOUBLE")
    field(NELM, "$(NELM_BL)")
    info(autosaveFields, "VAL")
}

record(waveform, "$(DEVICE):IBL_RBV")
{
    field(PINI, "YES")
    field(DESC, "I baseband waveform, readback")
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn($(PORT),0) i_baseband_wf_rbv")
    field(SCAN, "I/O Intr")
    field(FTVL, "DOUBLE")
    field(NELM, "$(NELM_BL)")
}

record(waveform, "$(DEVICE):QBL_RBV")
{
    field(PINI, "YES")
    field(DESC, "Q baseband waveform, readback")
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn($(PORT),0) q_baseband_wf_rbv")
    field(SCAN, "I/O Intr")
    field(FTVL, "DOUBLE")
    field(NELM, "$(NELM_BL)")
}

record(waveform, "$(DEVICE):ABL_RBV")
{
    field(PINI, "YES")
    field(DESC, "Ampl baseband waveform, readback")
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn($(PORT),0) a_baseband_wf_rbv")
    field(SCAN, "I/O Intr")
    field(FTVL, "DOUBLE")
    field(NELM, "$(NELM_BL)")
}

record(waveform, "$(DEVICE):PBL_RBV")
{
    field(PINI, "YES")
    field(DESC, "Phase baseband waveform, readback")
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn($(PORT),0) p_baseband_wf_rbv")
    field(SCAN, "I/O Intr")
    field(FTVL, "DOUBLE")
    field(NELM, "$(NELM_BL)")
}

record(ao, "$(DEVICE):BVOLTCONV")
{
    field(PINI, "YES")
    field(DESC, "Conversion Factor for Beam Voltage")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0) bvolt_conv")
    field(OMSL, "supervisory")
    field(SCAN, "Passive")
    field(EGU,  "kV/Count")
    field(PREC, "5")
    field(VAL, "1.")
    info(autosaveFields, "VAL")
}


record(ao, "$(DEVICE):VARGAIN")
{
    field(PINI, "YES")
    field(DESC, "Gain for RMS Jitter Calculation")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0) var_gain")
    field(OMSL, "supervisory")
    field(SCAN, "Passive")
    field(EGU,  "gain")
    field(PREC, "5")
    field(DRVH, "1.")
    field(DRVL, "0.")
    field(VAL, "0.004")
    info(autosaveFields, "VAL")
}

record(ao, "$(DEVICE):VARGAIN_NT")
{
    field(PINI, "YES")
    field(DESC, "Gain for RMS Jitter Calculation")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0) var_gain_nt")
    field(OMSL, "supervisory")
    field(SCAN, "Passive")
    field(EGU,  "gain")
    field(PREC, "5")
    field(DRVH, "1.")
    field(DRVL, "0.")
    field(VAL, "0.004")
    info(autosaveFields, "VAL")
}

record(bo, "$(DEVICE):UPDATEAMPLNORM")
{
    field(PINI, "NO")
    field(DESC, "Update DAC Normalization Factor")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),0) update_ampl_norm")
    field(HIGH, "1")
}

record(ai, "$(DEVICE):AMPLNORM_READBACK")
{
    field(DESC, "Normalization Factor calculated in firmware")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),0) ampl_norm_rbv")
    field(SCAN, "I/O Intr")
    field(EGU,  "")
    field(PREC, "5")
    field(ASG,  "Internal")
    field(FLNK, "$(DEVICE):AMPLNORM_SYNC")
}

record(ao, "$(DEVICE):AMPLNORM_SYNC")
{
    field(DESC, "Update Normalization Factor setting from firmware readback")
    field(OMSL, "closed_loop")
    field(DOL, "$(DEVICE):AMPLNORM_READBACK")
    field(SCAN, "Passive")
    field(EGU,  "")
    field(PREC, "5")
    field(ASG,  "Internal")
    field(OUT, "$(DEVICE):AMPLNORM PP")
}

record(ao, "$(DEVICE):AMPLNORM")
{
    field(PINI, "YES")
    field(DESC, "Normalization Factor for Amplitude")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),0) ampl_norm")
    field(OMSL, "supervisory")
    field(SCAN, "Passive")
    field(EGU,  "")
    field(PREC, "5")
    field(VAL, "1.")
    info(autosaveFields, "VAL")
}

record(ao, "$(DEVICE):VARNSAMPLE")
{
    field(PINI, "YES")
    field(DESC, "Num sample approx for RMS Jitter calc")
    field(SCAN, "Passive")
    field(EGU,  "samples")
    field(PREC, "0")
    field(VAL,  "250")
    field(OUT, "$(DEVICE):VARGAIN_CALC.A PP")
    info(autosaveFields, "VAL")
}

record(calcout, "$(DEVICE):VARGAIN_CALC")
{
    field(PINI, "NO")
    field(DESC, "Num sample to gain calculation")
    field(SCAN, "Passive")
    field(CALC, "A?1/A:0")
    field(OUT,  "$(DEVICE):VARGAIN PP")
    field(ASG,  "Internal")
}

record(calcout, "$(DEVICE):VARNSAMPLE_CALC")
{
    field(PINI, "NO")
    field(DESC, "Gain to num sample calculation")
    field(SCAN, "Passive")
    field(INPA, "$(DEVICE):VARGAIN CP")
    field(CALC, "A?1/A:0")
    field(OUT,  "$(DEVICE):VARNSAMPLE PP")
    field(ASG,  "Internal")
}

record(ao, "$(DEVICE):VARNSAMPLE_NT")
{
    field(PINI, "YES")
    field(DESC, "Num sample approx for RMS Jitter calc")
    field(SCAN, "Passive")
    field(EGU,  "samples")
    field(PREC, "0")
    field(VAL,  "250")
    field(OUT, "$(DEVICE):VARGAIN_NT_CALC.A PP")
    info(autosaveFields, "VAL")
}

record(calcout, "$(DEVICE):VARGAIN_NT_CALC")
{
    field(PINI, "NO")
    field(DESC, "Num sample to gain calculation")
    field(SCAN, "Passive")
    field(CALC, "A?1/A:0")
    field(OUT,  "$(DEVICE):VARGAIN_NT PP")
    field(ASG,  "Internal")
}

record(calcout, "$(DEVICE):VARNSAMPLE_NT_CALC")
{
    field(PINI, "NO")
    field(DESC, "Gain to num sample calculation")
    field(SCAN, "Passive")
    field(INPA, "$(DEVICE):VARGAIN_NT CP")
    field(CALC, "A?1/A:0")
    field(OUT,  "$(DEVICE):VARNSAMPLE_NT PP")
    field(ASG,  "Internal")
}

